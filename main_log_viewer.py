import json, os, numpy as np
from vispy import app, scene
from vispy.scene.visuals import Text
from PyQt6 import QtWidgets, QtCore

app.use_app('pyqt6')  # –≤–∞–∂–Ω–æ

from biomes_properties import BIOME_DATA


# === –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –æ–∫–Ω–∞ ===
class LogViewer(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("WorldEvolution Log Viewer")
        self.resize(1800, 1000)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
        central = QtWidgets.QWidget()
        self.setCentralWidget(central)
        layout = QtWidgets.QHBoxLayout(central)

        # === –õ–µ–≤–∞—è —á–∞—Å—Ç—å ‚Äî VisPy Canvas ===
        self.canvas = scene.SceneCanvas(keys='interactive', bgcolor='black', show=False, size=(1400, 1000))
        self.view = self.canvas.central_widget.add_view()
        self.view.camera = scene.cameras.TurntableCamera(fov=45, azimuth=0, elevation=30, distance=3)
        layout.addWidget(self.canvas.native, stretch=4)
        self.canvas.events.mouse_press.connect(self.on_mouse_click)

        # === –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (Qt) ===
        self.side = QtWidgets.QVBoxLayout()
        layout.addLayout(self.side, stretch=1)

        # === –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ===
        self.label_year = QtWidgets.QLabel("–ì–æ–¥: ‚Äî")
        self.label_year.setStyleSheet("color:white; font-size:16px;")
        self.side.addWidget(self.label_year)

        self.combo_log = QtWidgets.QComboBox()
        self.refresh_log_files()
        self.side.addWidget(self.combo_log)

        self.slider = QtWidgets.QSlider(QtCore.Qt.Orientation.Horizontal)
        self.slider.setRange(0, 100)
        self.side.addWidget(self.slider)

        controls = QtWidgets.QHBoxLayout()
        self.side.addLayout(controls)
        self.btn_play = QtWidgets.QPushButton("‚ñ∂ / ‚è∏")
        self.btn_fast = QtWidgets.QPushButton("‚è©")
        self.btn_slow = QtWidgets.QPushButton("‚è™")
        controls.addWidget(self.btn_play)
        controls.addWidget(self.btn_fast)
        controls.addWidget(self.btn_slow)

        self.side.addStretch(1)

        # === –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã ===
        self.combo_log.activated.connect(self.on_log_selected)
        self.slider.valueChanged.connect(self.slider_changed)
        self.btn_play.clicked.connect(self.toggle_play)
        self.btn_fast.clicked.connect(self.speed_up)
        self.btn_slow.clicked.connect(self.speed_down)

        # === –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ===
        self.load_world()
        self.current_entities = []
        self.current_log = []
        self.frame_index = 0
        self.paused = False
        self.speed_factor = 1.0

        self.timer = app.Timer(interval=0.5, connect=self.update_frame, start=False)
        self.canvas.events.draw.connect(self.on_canvas_ready)

        # === –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ (–Ω–∏–∂–Ω—è—è –ø–æ–ª–æ–≤–∏–Ω–∞) ===
        self.info_box = QtWidgets.QTextEdit()
        self.info_box.setReadOnly(True)
        self.info_box.setStyleSheet("""
            background-color: #111;
            color: #FFD700;
            font-family: Consolas;
            font-size: 12px;
            border: 1px solid #333;
        """)
        self.side.addWidget(self.info_box, stretch=2)

        self.state_color_map = {}
        self.highlight_state = None
        self.highlight_color = (1.0, 1.0, 0.0, 1.0)  # –∂—ë–ª—Ç—ã–π

        self.capital_markers = scene.visuals.Markers(parent=self.view.scene)
        self.capital_markers.set_gl_state('translucent', depth_test=True)


    def on_canvas_ready(self, event=None):
        """–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Å—Ü–µ–Ω–∞ –≤–ø–µ—Ä–≤—ã–µ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–∞ (OpenGL –≥–æ—Ç–æ–≤)."""
        if getattr(self, "_canvas_ready", False):
            return  # —É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª–∏
        self._canvas_ready = True
        print("üü¢ OpenGL –∫–æ–Ω—Ç–µ–∫—Å—Ç –≥–æ—Ç–æ–≤, —Å—Ç–∞—Ä—Ç—É–µ–º —Ç–∞–π–º–µ—Ä.")
        self.timer.start()

    def grid_to_xyz(self, i, j, lift=0.002):
        base = self.points[i % self.nx, j % self.ny]
        n = base / np.linalg.norm(base)
        return base + n * lift

    # ------------------------------------------------------------
    # === –õ–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏—Ä–∞ –∏ –ª–æ–≥–æ–≤ ===
    # ------------------------------------------------------------

    def refresh_log_files(self):
        files = [f for f in os.listdir("logs") if f.endswith(".json")]
        self.combo_log.addItems(files)

    def load_world(self):
        with open("world_cells.json", "r", encoding="utf-8") as f:
            cells = json.load(f)

        self.nx = max(c["i"] for c in cells) + 1
        self.ny = max(c["j"] for c in cells) + 1
        self.world_cells = [[{} for _ in range(self.nx)] for _ in range(self.ny)]
        for c in cells:
            self.world_cells[c["j"]][c["i"]] = c

        self.points = np.zeros((self.nx, self.ny, 3), dtype=np.float32)
        self.colors = np.zeros((self.nx, self.ny, 4), dtype=np.float32)
        for c in cells:
            i, j = c["i"], c["j"]
            theta = (i / (self.nx - 1)) * 2.0 * np.pi
            phi = np.pi / 2.0 - (j / (self.ny - 1)) * np.pi
            r = 1.0
            x = r * np.cos(phi) * np.cos(theta)
            y = r * np.cos(phi) * np.sin(theta)
            z = r * np.sin(phi)
            self.points[i, j] = (x, y, z)
            biome = c.get("biome", "Unknown")
            props = BIOME_DATA.get(biome)
            col = props["vis_color"] if props else (255, 0, 255)
            self.colors[i, j] = [col[0]/255, col[1]/255, col[2]/255, 1.0]
        self.verts = self.points.reshape(-1, 3)
        self.base_cols_flat = self.colors.reshape(-1, 4)

        faces = []
        for i in range(self.nx - 1):
            for j in range(self.ny - 1):
                p0 = i * self.ny + j
                p1 = (i + 1) * self.ny + j
                p2 = (i + 1) * self.ny + (j + 1)
                p3 = i * self.ny + (j + 1)
                faces.append((p0, p1, p2))
                faces.append((p0, p2, p3))
        faces = np.array(faces, dtype=np.uint32)
        self.faces = faces

        self.earth_mesh = scene.visuals.Mesh(
            vertices=self.verts, faces=self.faces, vertex_colors=self.base_cols_flat, shading='smooth', parent=self.view.scene
        )
        self.markers = scene.visuals.Markers(parent=self.view.scene)

    def on_log_selected(self, index):
        if index < 0:
            return
        filename = self.combo_log.itemText(index)
        self.load_log(filename)

    def load_log(self, filename):
        if not filename:
            return

        full_path = os.path.join("logs", filename)
        print(f"üìú –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥: {full_path}")

        try:
            with open(full_path, "r", encoding="utf-8") as f:
                self.current_log = json.load(f)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–∞:", e)
            return

        if not self.current_log:
            print("‚ö† –õ–æ–≥ –ø—É—Å—Ç–æ–π.")
            return

        self.slider.setRange(0, len(self.current_log)-1)
        self.slider.setValue(0)
        self.frame_index = 0

        # üîπ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞
        self.draw_frame(0)
        self.view.camera.view_changed()
        self.canvas.update()

        # üîπ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        self.paused = False
        self.timer.start()


        print(f"‚úÖ –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω ({len(self.current_log)} –∫–∞–¥—Ä–æ–≤)")

    # ------------------------------------------------------------
    # === –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ===
    # ------------------------------------------------------------

    def draw_frame(self, idx):
        print('drawing', idx)
        if not self.current_log or self.earth_mesh is None:
            print(self.earth_mesh)
            return

        if getattr(self.earth_mesh, "mesh_data", None) is None:
            QtCore.QTimer.singleShot(100, lambda: self.draw_frame(idx))
            return

        if getattr(self, "highlighted", False):
            self.highlighted = False
            self.earth_mesh.mesh_data.set_vertex_colors(self.base_cols_flat)


        snap = self.current_log[idx]
        year = snap["year"]
        self.current_entities = snap["entities"]
        self.label_year.setText(f"–ì–æ–¥: {year}")

        mesh_cols = self.base_cols_flat.copy()
        positions, colors_list, sizes = [], [], []

        for e in self.current_entities:
            stage, i, j = e["stage"], e["i"], e["j"]

            if stage == "state":
                state_id = e["id"]

                # --- –ï—Å–ª–∏ –¥–ª—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ –Ω–µ—Ç —Ü–≤–µ—Ç–∞ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ---
                if state_id not in self.state_color_map:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ RGB –Ω–∞ –æ—Å–Ω–æ–≤–µ ID (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ)
                    np.random.seed(state_id)  # —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π ID –≤—Å–µ–≥–¥–∞ –∏–º–µ–ª –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ü–≤–µ—Ç
                    color_rgb = np.random.rand(3) * 0.8 + 0.2  # —á—É—Ç—å —è—Ä—á–µ (0.2‚Äì1.0)
                    self.state_color_map[state_id] = color_rgb

                else:
                    color_rgb = self.state_color_map[state_id]

                color_rgba = (color_rgb[0], color_rgb[1], color_rgb[2], 1.0)

                # --- –†–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é ---
                for (ti, tj) in e.get("territory", []):
                    vertex_idx = ti * self.ny + tj
                    if 0 <= vertex_idx < len(mesh_cols):
                        mesh_cols[vertex_idx] = color_rgba

            else:
                pos = self.grid_to_xyz(i, j)
                positions.append(pos)
                if stage == "group":
                    colors_list.append((1, 0, 0, 1))
                    sizes.append(6)
                elif stage == "tribe":
                    colors_list.append((1, 1, 0, 1))
                    sizes.append(8)
                elif stage == "city":
                    colors_list.append((0, 1, 0, 1))
                    sizes.append(10)
                elif stage == "seafaring":
                    colors_list.append((1, 1, 1, 1))
                    sizes.append(8)
                else:
                    colors_list.append((0.5, 0.5, 0.5, 1))
                    sizes.append(5)
        
        # --- –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ, –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –µ–≥–æ ---
        if self.highlight_state:
            highlight_territory = self.highlight_state.get("territory", [])
            for (ti, tj) in highlight_territory:
                vertex_idx = ti * self.ny + tj
                if 0 <= vertex_idx < len(mesh_cols):
                    mesh_cols[vertex_idx] = self.highlight_color
        
        # === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–æ–ª–∏—Ü –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤ ===
        capital_positions, capital_colors, capital_sizes = [], [], []

        for e in self.current_entities:
            if e["stage"] == "state":
                i, j = e["i"], e["j"]
                pos = self.grid_to_xyz(i, j, lift=0.004)
                capital_positions.append(pos)

                tech = e.get("tech", 0.0)
                base_size = 5 + tech * 6
                color = (1.0, 0.9, 0.3, 1.0)

                # --- –µ—Å–ª–∏ —ç—Ç–æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ ---
                if self.highlight_state and e["id"] == self.highlight_state["id"]:
                    base_size *= 1.8          # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                    color = (1.0, 1.0, 0.5, 1.0)  # –¥–µ–ª–∞–µ–º —á—É—Ç—å —è—Ä—á–µ

                capital_colors.append(color)
                capital_sizes.append(base_size)

        if capital_positions:
            self.capital_markers.set_data(
                np.array(capital_positions),
                face_color=np.array(capital_colors),
                size=np.array(capital_sizes),
                symbol='star',
                edge_color='white'
            )
        else:
            self.capital_markers.set_data(np.empty((0, 3)))

        # --- –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ ---
        if getattr(self.earth_mesh, "mesh_data", None):
            self.earth_mesh.mesh_data.set_vertex_colors(mesh_cols)
            self.earth_mesh.mesh_data_changed()
            self.earth_mesh.update()
            self.canvas.update()  # üîπ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç GPU-–ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É

        # --- —Ç–æ—á–∫–∏ (–∞–≥–µ–Ω—Ç—ã) ---
        if positions:
            self.markers.set_data(
                np.array(positions),
                face_color=np.array(colors_list),
                size=np.array(sizes)
            )
        else:
            self.markers.set_data(np.empty((0, 3)))

        # üîπ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â–∞–µ–º —Å—Ü–µ–Ω–µ, —á—Ç–æ –∫–∞–¥—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è
        self.view.camera.view_changed()
        self.canvas.update()

    def grid_to_xyz(self, i, j, lift=0.002):
        base = self.points[i % self.nx, j % self.ny]
        n = base / np.linalg.norm(base)
        return base + n * lift

    def update_frame(self, event):
        if self.paused or not self.current_log:
            return

        self.frame_index += 1
        if self.frame_index >= len(self.current_log):
            self.frame_index = len(self.current_log) - 1
            self.draw_frame(self.frame_index)
            self.timer.stop()
            self.paused = True
            print("‚èπ –ö–æ–Ω–µ—Ü –ª–æ–≥–∞, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            return

        self.draw_frame(self.frame_index)

        # üîπ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–∑—É–Ω–æ–∫ –±–µ–∑ –≤—ã–∑–æ–≤–∞ slider_changed
        self.slider.blockSignals(True)
        self.slider.setValue(self.frame_index)
        self.slider.blockSignals(False)

        self.canvas.update()

    # ------------------------------------------------------------
    # === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ===
    # ------------------------------------------------------------

    def slider_changed(self, val):
        if getattr(self, "_updating_slider", False):
            return
        self._updating_slider = True
        self.frame_index = val
        self.draw_frame(val)
        self._updating_slider = False

    def toggle_play(self):
        self.paused = not self.paused
        if not self.paused:
            if not self.timer.running:
                self.timer.start()
            print("‚ñ∂ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ")
        else:
            print("‚è∏ –ü–∞—É–∑–∞")

    def speed_up(self):
        self.speed_factor = min(4.0, self.speed_factor * 1.5)
        self.timer.interval = max(0.05, 0.5 / self.speed_factor)
        print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å x{self.speed_factor:.1f}")

    def speed_down(self):
        self.speed_factor = max(0.25, self.speed_factor / 1.5)
        self.timer.interval = 0.5 / self.speed_factor
        print(f"üê¢ –°–∫–æ—Ä–æ—Å—Ç—å x{self.speed_factor:.1f}")

    def compute_ray_from_click(self, view, canvas, pos):
        cam = view.camera
        W, H = canvas.size
        x_ndc = (2.0 * pos[0] / W) - 1.0
        y_ndc = 1.0 - (2.0 * pos[1] / H)
        fov = np.deg2rad(cam.fov)
        aspect = W / H
        theta = np.deg2rad(cam.azimuth)
        phi = np.deg2rad(cam.elevation)
        r = cam.distance
        cam_pos = cam.center + r * np.array([
            np.cos(phi) * np.sin(theta),
            -np.cos(phi) * np.cos(theta),
            np.sin(phi)
        ], dtype=np.float32)
        forward = cam.center - cam_pos
        forward /= np.linalg.norm(forward)
        world_up = np.array([0.0, 0.0, 1.0], dtype=np.float32)
        if abs(np.dot(forward, world_up)) > 0.98:
            world_up = np.array([0.0, 1.0, 0.0], dtype=np.float32)
        right = np.cross(forward, world_up)
        right /= np.linalg.norm(right)
        up = np.cross(right, forward)
        up /= np.linalg.norm(up)
        half_h = np.tan(fov / 2.0)
        half_w = aspect * half_h
        dir_world = forward + right * (x_ndc * half_w) + up * (y_ndc * half_h)
        dir_world /= np.linalg.norm(dir_world)
        return cam_pos.astype(np.float32), dir_world.astype(np.float32)

    def on_mouse_click(self, event):
        if event.button != 1:
            return

        pos = event.pos
        ray_origin, ray_dir = self.compute_ray_from_click(self.view, self.canvas, pos)

        # --- –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ª—É—á–∞ —Å–æ —Å—Ñ–µ—Ä–æ–π ---
        R = 1.0
        a = np.dot(ray_dir, ray_dir)
        b = 2.0 * np.dot(ray_origin, ray_dir)
        c = np.dot(ray_origin, ray_origin) - R*R
        delta = b*b - 4*a*c
        if delta < 0:
            return
        t = (-b - np.sqrt(delta)) / (2*a)
        hit_point = ray_origin + t * ray_dir
        x, y, z = hit_point

        # --- –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ i,j ---
        theta = np.arctan2(y, x)
        if theta < 0:
            theta += 2*np.pi
        phi = np.arctan2(z, np.sqrt(x*x + y*y))
        i = int(np.rint(theta / (2*np.pi) * (self.nx - 1))) % self.nx
        j = int(np.rint((np.pi/2 - phi) / np.pi * (self.ny - 1)))
        j = int(np.clip(j, 0, self.ny - 1))

        # --- –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–µ—Ç–∫–µ ---
        cell = self.world_cells[j][i]
        biome = cell.get("biome", "Unknown")
        elev = cell.get("elevation_m", 0.0)

        props = BIOME_DATA.get(biome, {})
        habit = props.get("habitability", 0)
        arable = props.get("arable_land", 0)
        move = props.get("movement_cost", 0)
        fresh_water = props.get("fresh_water", 0)
        food_veg = props.get("food_vegetal", 0)
        food_animal = props.get("food_animal", 0)
        wood = props.get("wood_yield", 0)
        stone = props.get("stone_yield", 0)
        ore = props.get("ore_yield", 0)

        avg_food = (food_veg + food_animal) / 2

        text = (
            f"--- –ö–ª–µ—Ç–∫–∞ ({i}, {j}) ---\n"
            f"–ë–∏–æ–º: {biome}\n"
            f"–í—ã—Å–æ—Ç–∞: {elev:.0f} –º\n\n"
            f"–ü—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å: {habit:.2f}\n"
            f"–ó–µ–º–ª–µ–¥–µ–ª–∏–µ: {arable:.2f}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è: {move:.2f}\n\n"
            f"–ü—Ä–µ—Å–Ω–∞—è –≤–æ–¥–∞: {fresh_water:.2f}\n"
            f"–ï–¥–∞ (—Å—Ä–µ–¥–Ω—è—è): {avg_food:.2f}\n"
            f"  —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–∞—è: {food_veg:.2f}\n"
            f"  –∂–∏–≤–æ—Ç–Ω–∞—è: {food_animal:.2f}\n\n"
            f"–†–µ—Å—É—Ä—Å—ã:\n"
            f"  –î—Ä–µ–≤–µ—Å–∏–Ω–∞: {wood:.2f}\n"
            f"  –ö–∞–º–µ–Ω—å: {stone:.2f}\n"
            f"  –†—É–¥–∞: {ore:.2f}\n"
        )

        # --- –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–∞ –≤ –∫–ª–µ—Ç–∫–µ ---
        selected_entity = None
        for e in self.current_entities:
            if e["i"] == i and e["j"] == j:
                selected_entity = e
                break

        # --- –ü–æ–∏—Å–∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–ª–µ—Ç–∫–∞ ---
        clicked_state = None
        for e in self.current_entities:
            if e["stage"] == "state" and "territory" in e:
                if [i, j] in e["territory"]:
                    clicked_state = e
                    break

        # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ---
        if selected_entity:
            e = selected_entity
            text += f"=== –û–±—ä–µ–∫—Ç: {e['stage'].upper()} #{e['id']} ===\n"
            text += f"–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {e.get('population', 0)}\n"
            text += f"–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {e.get('tech', 0):.3f}\n"
            if e["stage"] == "state":
                text += f"–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è: {len(e.get('territory', []))} –∫–ª–µ—Ç–æ–∫\n"

        elif clicked_state:
            e = clicked_state
            text += f"=== –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ #{e['id']} ===\n"
            text += f"–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {e.get('population', 0)}\n"
            text += f"–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {e.get('tech', 0):.3f}\n"
            text += f"–†–∞–∑–º–µ—Ä —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏: {len(e.get('territory', []))} –∫–ª–µ—Ç–æ–∫\n"
            text += f"–°—Ç–æ–ª–∏—Ü–∞: ({e['i']}, {e['j']})\n"

            # üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏
            self.highlight_state = e
            self.draw_frame(self.frame_index)
            self.canvas.update()

        else:
            text += "–û–±—ä–µ–∫—Ç–æ–≤ –≤ —ç—Ç–æ–π –∫–ª–µ—Ç–∫–µ –Ω–µ—Ç.\n"
            self.highlight_state = None
            self.draw_frame(self.frame_index)
            self.canvas.update()


        # --- –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ ---
        self.info_box.setPlainText(text)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    qapp = QtWidgets.QApplication([])
    w = LogViewer()
    w.show()
    app.run()
