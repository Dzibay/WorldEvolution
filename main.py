import json
import sys
import numpy as np

import vispy.app
vispy.app.use_app('glfw')

from vispy import app, scene
from vispy.scene.visuals import Text

# === 0. –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–æ–º–æ–≤ ===
try:
    from biomes_properties import BIOME_DATA
except ImportError:
    print("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª biomes_properties.py!")
    sys.exit(1)

# === 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã —è—á–µ–µ–∫ ===
JSON_FILE = "world_cells.json"
try:
    with open(JSON_FILE, "r", encoding="utf-8") as f:
        cells = json.load(f)
except FileNotFoundError:
    print(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {JSON_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    sys.exit(1)

nx = max(c["i"] for c in cells) + 1
ny = max(c["j"] for c in cells) + 1

R_EARTH_KM = 6371.0
SCALE = 1.0 / R_EARTH_KM
ELEV_EXAG = 50.0  # –ø—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–ª—å–µ—Ñ–∞
UNKNOWN_COLOR = (255, 0, 255)

# === 2. –°—Ñ–µ—Ä–∏—á–µ—Å–∫–∞—è —Å–µ—Ç–∫–∞ ===
points = np.zeros((nx, ny, 3), dtype=np.float32)
colors = np.zeros((nx, ny, 4), dtype=np.float32)

for c in cells:
    i, j = c["i"], c["j"]
    theta = (i / (nx - 1)) * 2.0 * np.pi
    phi = np.pi / 2.0 - (j / (ny - 1)) * np.pi
    elev_km = float(c.get("elevation_m", 0.0)) / 1000.0
    r = 1.0

    x = r * np.cos(phi) * np.cos(theta)
    y = r * np.cos(phi) * np.sin(theta)
    z = r * np.sin(phi)
    points[i, j] = (x, y, z)

    biome = c.get("biome", "Unknown")
    props = BIOME_DATA.get(biome)
    col = props["vis_color"] if props else UNKNOWN_COLOR
    colors[i, j] = [col[0]/255, col[1]/255, col[2]/255, 1.0]

# === 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –¥–ª—è –º–µ—à–∞ ===
faces = []
for i in range(nx - 1):
    for j in range(ny - 1):
        p0 = i * ny + j
        p1 = (i + 1) * ny + j
        p2 = (i + 1) * ny + (j + 1)
        p3 = i * ny + (j + 1)
        faces.append((p0, p1, p2))
        faces.append((p0, p2, p3))
faces = np.array(faces, dtype=np.uint32)

verts = points.reshape(-1, 3)
cols = colors.reshape(-1, 4)

# === 4. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã ===
canvas = scene.SceneCanvas(keys="interactive", bgcolor="black", show=True, size=(1600, 1000))
view = canvas.central_widget.add_view()
view.camera = scene.cameras.TurntableCamera(fov=45, azimuth=0, elevation=30, distance=3)

# –ú–µ—à –ó–µ–º–ª–∏
earth_mesh = scene.visuals.Mesh(
    vertices=verts,
    faces=faces,
    vertex_colors=cols,
    shading='smooth',
    parent=view.scene
)

# === 5. –ì—Ä—É–ø–ø—ã (–∫—Ä–∞—Å–Ω—ã–µ —Ç–æ—á–∫–∏) ===
from simulation import HumanGroup, load_world
from config import STARTING_CELL_COORDS, STARTING_POPULATION, SIMULATION_STEP_YEARS

world_data = load_world()
active_groups = [HumanGroup(0, *STARTING_CELL_COORDS, STARTING_POPULATION)]

group_markers = scene.visuals.Markers(parent=view.scene)
group_markers.set_data(np.array([[0, 0, 1]]), face_color='red', size=10)

def grid_to_xyz(i, j, lift=0.002):
    base = points[i % nx, j % ny]
    n = base / np.linalg.norm(base)
    return base + n * lift

# === 6. HUD (–≥–æ–¥) ===
hud = Text("–ì–æ–¥: ‚Äî", 
           parent=canvas.scene, 
           anchor_x='left',   # ‚Üê –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
           anchor_y='bottom',
           color='white')
hud.font_size = 20
hud.pos = (0, 0)

# === 7. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–∫–Ω–æ (–ø–æ –∫–ª–∏–∫—É) ===
def compute_ray_from_click(view, canvas, pos):
    """
    –£—Å—Ç–æ–π—á–∏–≤—ã–π —Ä—ç–π–∫–∞—Å—Ç –¥–ª—è TurntableCamera:
    - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω —Ç–æ—á–Ω–æ –∫ center
    - –±–µ–∑ –∑–∞–≤–∞–ª–∞/—Å–∫–æ—Å–∞ –ø—Ä–∏ –ª—é–±–æ–º –ø–æ–≤–æ—Ä–æ—Ç–µ/–∑—É–º–µ
    """
    import numpy as np

    cam = view.camera
    W, H = canvas.size
    # —ç–∫—Ä–∞–Ω -> NDC
    x_ndc = (2.0 * pos[0] / W) - 1.0
    y_ndc = 1.0 - (2.0 * pos[1] / H)

    fov = np.deg2rad(cam.fov)
    aspect = W / H

    # 1) –ø–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ turntable
    theta = np.deg2rad(cam.azimuth)
    phi   = np.deg2rad(cam.elevation)
    r     = cam.distance
    cam_pos = cam.center + r * np.array([
        np.cos(phi) * np.sin(theta),
        -np.cos(phi) * np.cos(theta),
        np.sin(phi)
    ], dtype=np.float32)

    # 2) –±–∞–∑–∏—Å –∫–∞–º–µ—Ä—ã –∏–∑ center/pos
    forward = cam.center - cam_pos
    forward /= np.linalg.norm(forward)

    world_up = np.array([0.0, 0.0, 1.0], dtype=np.float32)
    # –µ—Å–ª–∏ –ø–æ—á—Ç–∏ —Å–º–æ—Ç—Ä–∏–º –≤–¥–æ–ª—å world_up ‚Äî –≤–æ–∑—å–º—ë–º –∑–∞–ø–∞—Å–Ω–æ–π "–≤–≤–µ—Ä—Ö"
    if abs(np.dot(forward, world_up)) > 0.98:
        world_up = np.array([0.0, 1.0, 0.0], dtype=np.float32)

    # –í–ù–ò–ú–ê–ù–ò–ï –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ –∫—Ä–æ—Å—Å–æ–≤, —á—Ç–æ–±—ã "–ø—Ä–∞–≤–æ" —Å–æ–≤–ø–∞–¥–∞–ª–æ —Å —ç–∫—Ä–∞–Ω–æ–º
    right = np.cross(forward, world_up); right /= np.linalg.norm(right)
    up    = np.cross(right,  forward);   up    /= np.linalg.norm(up)

    # 3) –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ü–∏–∏
    half_h = np.tan(fov / 2.0)
    half_w = aspect * half_h

    # 4) –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª—É—á–∞
    dir_world = forward + right * (x_ndc * half_w) + up * (y_ndc * half_h)
    dir_world /= np.linalg.norm(dir_world)

    return cam_pos.astype(np.float32), dir_world.astype(np.float32)

info_box = Text(
    '', 
    parent=canvas.scene,
    anchor_x='left',
    anchor_y='bottom',
    color='white'
)
info_box.font_size = 16
info_box.pos = (0, 50)


def get_cell_info(i, j):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–µ—Ç–∫–µ (–ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º i,j)."""
    c = next((cell for cell in cells if cell["i"] == i and cell["j"] == j), None)
    if not c:
        return f"‚ùå –ö–ª–µ—Ç–∫–∞ ({i},{j}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    biome = c.get("biome", "Unknown")
    elev = c.get("elevation_m", 0.0)

    # üîπ –î–æ—Å—Ç–∞—ë–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ BIOME_DATA
    props = BIOME_DATA.get(biome, {})
    fresh_water = props.get("fresh_water", 0)
    food_vegetal = props.get("food_vegetal", 0)
    food_animal = props.get("food_animal", 0)
    wood = props.get("wood_yield", 0)
    stone = props.get("stone_yield", 0)
    ore = props.get("ore_yield", 0)
    habit = props.get("habitability", 0)
    arable = props.get("arable_land", 0)
    move_cost = props.get("movement_cost", 0)
    is_ocean = props.get("is_ocean", False)
    is_fresh = props.get("is_fresh_water", False)

    avg_food = (food_vegetal + food_animal) / 2

    # --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ ---
    lines = [
        f"--- –ö–ª–µ—Ç–∫–∞ ({i},{j}) ---",
        f"–ë–∏–æ–º: {biome}",
        f"–í—ã—Å–æ—Ç–∞: {elev:.0f} –º",
        "",
        f"–ü—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å –¥–ª—è –∂–∏–∑–Ω–∏: {habit:.2f}",
        f"–ü—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å –¥–ª—è –∑–µ–º–ª–µ–¥–µ–ª–∏—è: {arable:.2f}",
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è: {move_cost:.2f}",
        "",
        f"–í–æ–¥–∞ (–ø—Ä–µ—Å–Ω–∞—è): {fresh_water:.2f}{' üíß' if is_fresh else ''}",
        f"–ï–¥–∞: {avg_food:.2f} (—Å—Ä–µ–¥–Ω—è—è)",
        f"     —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–∞—è {food_vegetal:.2f},",
        f"     –∂–∏–≤–æ—Ç–Ω–∞—è {food_animal:.2f},",
        f"–†–µ—Å—É—Ä—Å—ã:",
        f"  –î—Ä–µ–≤–µ—Å–∏–Ω–∞: {wood:.2f}",
        f"  –ö–∞–º–µ–Ω—å: {stone:.2f}",
        f"  –†—É–¥–∞: {ore:.2f}",
    ]
    return "\n".join(lines)


def get_group_info(entity):
    return (
        f"--- {entity.stage.capitalize()} #{entity.id} ---\n"
        f"–ü–æ–∑–∏—Ü–∏—è: ({entity.i},{entity.j})\n"
        f"–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {int(entity.population)}\n"
        f"–ï–¥–∞: {getattr(entity, 'food', 0):.1f}\n"
        f"–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {getattr(entity, 'tech', 0):.3f}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {getattr(entity, 'age', 0)}"
    )

# === –î–æ–±–∞–≤–∏–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—á–∫–∏ –∫–ª–∏–∫–∞ ===
click_marker = scene.visuals.Markers(parent=view.scene)
click_marker.set_data(np.array([[0, 0, 0]]), face_color='yellow', size=10)

@canvas.events.mouse_press.connect
def on_mouse_click(event):
    """–ü—Ä–∏ –∫–ª–∏–∫–µ –º—ã—à—å—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–µ–π –∫–ª–µ—Ç–∫–µ –∏–ª–∏ –æ–±—ä–µ–∫—Ç–µ."""
    if event.button != 1:
        return

    pos = event.pos
    ray_origin, ray_dir = compute_ray_from_click(view, canvas, pos)

    # === 1. –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ª—É—á–∞ —Å–æ —Å—Ñ–µ—Ä–æ–π ===
    R = float(np.linalg.norm(points[0, 0]))  # —Ä–∞–¥–∏—É—Å —Å—Ñ–µ—Ä—ã –∏–∑ –º–µ—à–∞
    # R ‚Äî —Ä–∞–¥–∏—É—Å —Å—Ñ–µ—Ä—ã (—É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å)
    a = np.dot(ray_dir, ray_dir)               # =1, –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç –æ–±—â–µ–µ
    b = 2.0 * np.dot(ray_origin, ray_dir)
    c = np.dot(ray_origin, ray_origin) - R*R
    delta = b*b - 4*a*c
    if delta < 0:
        print("‚ùå –ü—Ä–æ–º–∞—Ö"); return

    sqrt_delta = np.sqrt(delta)
    t_candidates = [t for t in ((-b - sqrt_delta)/(2*a), (-b + sqrt_delta)/(2*a)) if t > 0]
    if not t_candidates:
        print("‚ùå –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–æ–∑–∞–¥–∏ –∫–∞–º–µ—Ä—ã"); return

    t = min(t_candidates)  # –±–ª–∏–∂–∞–π—à–∞—è —Ç–æ—á–∫–∞ –í–ü–ï–†–ï–î–ò –∫–∞–º–µ—Ä—ã
    hit_point = ray_origin + t * ray_dir
    x, y, z = hit_point

    # === 3. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ===
    theta = np.arctan2(y, x)
    if theta < 0:
        theta += 2*np.pi
    phi = np.arctan2(z, np.sqrt(x*x + y*y))

    i = int(np.rint(theta / (2*np.pi) * (nx - 1))) % nx
    j = int(np.rint((np.pi/2 - phi) / np.pi * (ny - 1)))
    j = int(np.clip(j, 0, ny - 1))

    # === 5. –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Ç–æ—á–∫–∏ –∫–ª–∏–∫–∞ ===
    # –ü–æ–¥–Ω–∏–º–∞–µ–º —Ç–æ—á–∫—É –Ω–∞ 0.5% —Ä–∞–¥–∏—É—Å–∞ –Ω–∞–¥ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å—é
    lift = 0.005 * R  # 0.5% —Ä–∞–¥–∏—É—Å–∞ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
    n = hit_point / np.linalg.norm(hit_point)  # –Ω–æ—Ä–º–∞–ª—å –Ω–∞—Ä—É–∂—É
    hit_lifted = hit_point + n * lift

    click_marker.set_data(np.array([hit_lifted]), face_color='yellow', size=12)

    # === 6. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–µ—Ç–∫–µ ===
    text = get_cell_info(i, j)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
    min_dist = 0.01
    for g in active_groups:
        pos_g = grid_to_xyz(g.i, g.j)
        if np.linalg.norm(pos_g - points[i, j]) < min_dist:
            text = get_group_info(g)
            break

    info_box.text = text


# === 8. –°–∏–º—É–ª—è—Ü–∏—è ===
current_year = -100000
simulation_running = True
update_interval_s = 0.5

def update_simulation(event):
    global current_year
    if not simulation_running:
        return

    current_year += SIMULATION_STEP_YEARS
    hud.text = f"–ì–æ–¥: {current_year}"

    new_entities = []
    positions = []
    colors = []

    for g in list(active_groups):
        if not g.alive:
            active_groups.remove(g)
            continue

        result = g.step(world_data, debug=True)

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–º–µ–Ω–∏
        try:
            from simulation import Tribe
            if isinstance(result, Tribe):
                print(f"‚û° –ì—Ä—É–ø–ø–∞ #{g.id} —Å–æ–∑–¥–∞–ª–∞ –ø–ª–µ–º—è #{result.id} ({result.i},{result.j})")
                new_entities.append(result)
                if g in active_groups:
                    active_groups.remove(g)
                continue
        except Exception:
            pass

        pos = grid_to_xyz(g.i, g.j)
        positions.append(pos)
        if getattr(g, "stage", "group") == "tribe":
            colors.append((1.0, 1.0, 0.0, 1.0))
        else:
            colors.append((1.0, 0.0, 0.0, 1.0))

    if new_entities:
        active_groups.extend(new_entities)

    if positions:
        group_markers.set_data(np.array(positions), face_color=np.array(colors), size=10)

# === 9. –¢–∞–π–º–µ—Ä ===
timer = app.Timer(interval=update_interval_s, connect=update_simulation, start=True)

# === 10. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ===
@canvas.events.key_press.connect
def on_key(event):
    global simulation_running, update_interval_s
    if event.key == 'P':
        simulation_running = not simulation_running
        print("‚è∏ –ü–∞—É–∑–∞" if not simulation_running else "‚ñ∂ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ")
    elif event.key in ['+', '=']:
        update_interval_s = max(0.05, update_interval_s / 1.5)
        timer.interval = update_interval_s
        print(f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: {update_interval_s:.2f} —Å–µ–∫")
    elif event.key in ['-', '_']:
        update_interval_s = min(5.0, update_interval_s * 1.5)
        timer.interval = update_interval_s
        print(f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: {update_interval_s:.2f} —Å–µ–∫")

# === 11. –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    app.run()
