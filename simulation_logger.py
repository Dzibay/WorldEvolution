import json
import os
from statistics import mean
from simulation import Simulation
from config import CHECKPOINT_INTERVAL, END_YEAR
import sys

LOG_DIR = "logs"
os.makedirs(LOG_DIR, exist_ok=True)

def serialize_entity(e):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç —Å—É—â–Ω–æ—Å—Ç–∏ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è JSON"""
    base = {
        "id": e.id,
        "stage": e.stage,
        "i": e.i,
        "j": e.j,
        "population": int(e.population),
        "tech": round(e.tech, 4),
        "alive": e.alive
    }

    # üîπ –ï—Å–ª–∏ —ç—Ç–æ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é
    if hasattr(e, "territory"):
        base["territory"] = list(map(list, e.territory))  # [[i,j], [i,j], ...]

    return base

def summarize_world(entities):
    """–°–æ–∑–¥–∞—ë—Ç —Å–≤–æ–¥–∫—É –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –º–∏—Ä–∞"""
    stages = {}
    pops = []
    techs = []

    for e in entities:
        stages[e.stage] = stages.get(e.stage, 0) + 1
        pops.append(e.population)
        techs.append(e.tech)

    summary = {
        "total_entities": len(entities),
        "total_population": int(sum(pops)),
        "avg_population": round(sum(pops) / len(pops), 2) if pops else 0,
        "max_population": max(pops) if pops else 0,
        "avg_tech": round(mean(techs), 4) if techs else 0.0,
        "stages": stages
    }
    return summary

def run_and_log_simulation(steps=5000, debug=False):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    # === 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã —è—á–µ–µ–∫ ===
    JSON_FILE = "world_cells.json"
    try:
        with open(JSON_FILE, "r", encoding="utf-8") as f:
            cells = json.load(f)
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {JSON_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)

    nx = max(c["i"] for c in cells) + 1
    ny = max(c["j"] for c in cells) + 1

    sim = Simulation(nx=nx, ny=ny)
    sim.initialize()

    log = []  # –°–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    last_logged_year = sim.year

    for step in range(steps):
        entities, year = sim.step(debug=debug)

        if not sim.running:
            print("–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏ –≤—ã–º–µ—Ä–ª–∏).")
            break

        # –ö–∞–∂–¥—ã–µ CHECKPOINT_INTERVAL –ª–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω–∏–º–æ–∫
        if (year - last_logged_year) >= CHECKPOINT_INTERVAL or year >= END_YEAR:
            summary = summarize_world(entities)
            snapshot = {
                "year": year,
                "summary": summary,
                "entities": [serialize_entity(e) for e in entities if e.alive]
            }
            log.append(snapshot)
            print(f"üß≠ {year}: {summary['total_entities']} –æ–±—ä–µ–∫—Ç–æ–≤, "
                  f"–Ω–∞—Å–µ–ª–µ–Ω–∏–µ {summary['total_population']}, "
                  f"–≥–æ—Å-–≤ {summary['stages'].get('state', 0)}")
            last_logged_year = year

        if year >= END_YEAR:
            print("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–∏–º—É–ª—è—Ü–∏–∏.")
            break

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
    log_filename = os.path.join(LOG_DIR, f"simulation_log_{log[0]['year']}_{year}.json")
    with open(log_filename, "w", encoding="utf-8") as f:
        json.dump(log, f, indent=2, ensure_ascii=False)
    print(f"‚úÖ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {log_filename} ({len(log)} –∑–∞–ø–∏—Å–µ–π)")

    last = log[-1]
    states = [e for e in last["entities"] if e["stage"] == "state"]
    print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–Ω–∏–º–æ–∫: {len(states)} –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤")
    for s in states[:3]:
        print("  ‚ñ∂", s["id"], len(s.get("territory", [])), "–∫–ª–µ—Ç–æ–∫")

    return log_filename

if __name__ == "__main__":
    run_and_log_simulation(steps=1500, debug=False)
